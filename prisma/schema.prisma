// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"

    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Tweet {
    id        String   @id @default(uuid())
    userId    String
    content   String
    createdAt DateTime @default(now())

    // When user is deleted, all the tweets he made would also be deleted
    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes Like[]

    @@index([userId])
}

model Like {
    userId  String
    tweetId String

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

    // One tweet can only be liked by an user once, so the id of a like can be composed by userId and tweetId
    @@id([userId, tweetId])
    @@index([userId])
    @@index([tweetId])
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // posts         Post[]

    // Non-Next Auth
    tweets    Tweet[]
    likes     Like[]
    followers User[]  @relation(name: "Followers")
    follows   User[]  @relation(name: "Followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
